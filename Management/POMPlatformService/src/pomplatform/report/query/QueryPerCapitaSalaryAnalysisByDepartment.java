package pomplatform.report.query;

import org.apache.log4j.Logger;
import delicacy.common.KeyValuePair;
import delicacy.common.AbstractQuery;
import delicacy.common.GenericBase;
import delicacy.common.BaseCollection;
import delicacy.connection.ThreadConnection;
import pomplatform.report.bean.BasePerCapitaSalaryAnalysisByDepartment;
import pomplatform.report.bean.ConditionPerCapitaSalaryAnalysisByDepartment;

public class QueryPerCapitaSalaryAnalysisByDepartment extends AbstractQuery<BasePerCapitaSalaryAnalysisByDepartment, ConditionPerCapitaSalaryAnalysisByDepartment>
{

	private static final Logger __logger = Logger.getLogger(QueryPerCapitaSalaryAnalysisByDepartment.class);

	public QueryPerCapitaSalaryAnalysisByDepartment() throws java.sql.SQLException 
	{
		setParameterNumber(18);
		setConnection(ThreadConnection.getConnection());
		setOrderByFields("AAA.*");
	}

	@Override
	public BaseCollection<BasePerCapitaSalaryAnalysisByDepartment> executeQuery( KeyValuePair[] replacements, ConditionPerCapitaSalaryAnalysisByDepartment condition ) throws java.sql.SQLException {
		return executeQuery(replacements, 
				condition.getCompanyId(), 
				condition.getPlateId(), 
				condition.getDepartmentId(), 
				condition.getYear(), 
				condition.getFirstStart(), 
				condition.getFirstEnd(), 
				condition.getSecondStart(), 
				condition.getSecondEnd(), 
				condition.getThirdStart(), 
				condition.getThirdEnd(), 
				condition.getFourthStart(), 
				condition.getFourthEnd(), 
				condition.getPlateId(), 
				condition.getYear(), 
				condition.getPlateId(), 
				condition.getYear(), 
				condition.getPlateId(), 
				condition.getDepartmentId()
			);
	}

	@Override
	public BasePerCapitaSalaryAnalysisByDepartment generateBase(Object[] __data) throws java.sql.SQLException {
		BasePerCapitaSalaryAnalysisByDepartment __base = new BasePerCapitaSalaryAnalysisByDepartment();
		int count = 0;
		Object val;
		if((val = __data[count++]) != null) __base.setDepartmentId(GenericBase.__getInt(val));
		if((val = __data[count++]) != null) __base.setYear(GenericBase.__getInt(val));
		if((val = __data[count++]) != null) __base.setFirstQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFirstPayIntegral(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setOne(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setOneAverage(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setOneAverageNum(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setSecondQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setSecondPayIntegral(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setTwo(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setTwoAverage(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setTwoAverageNum(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setThirdQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setThirdPayIntegral(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setThree(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setThreeAverage(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setThreeAverageNum(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFourthQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFourthPayIntegral(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFour(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFourAverage(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFourAverageNum(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setTotalQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setTotalPayQuarter(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFive(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFiveAverage(GenericBase.__getDecimal(val));
		if((val = __data[count++]) != null) __base.setFiveAverageNum(GenericBase.__getDecimal(val));
		return __base;
	}

	@Override
	public int setStatementParameters(int count, java.lang.Object ... args) throws java.sql.SQLException {

		int index = 0;
		for(int ii = 0; ii < args.length; ii++){
			if(args[ii] == null) continue;
			index++;
			__logger.info(String.format("%1$s = [%2$s]", fieldNames[ii], args[ii]));
		}
		if( index > 0 ) __logger.info("=================================================");
		if(args[0] != null) __statement.setInt(count++, GenericBase.__getInt(args[0]));
		if(args[1] != null) __statement.setInt(count++, GenericBase.__getInt(args[1]));
		if(args[2] != null) __statement.setInt(count++, GenericBase.__getInt(args[2]));
		if(args[3] != null) __statement.setInt(count++, GenericBase.__getInt(args[3]));
		if(args[4] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[4]));
		if(args[5] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[5]));
		if(args[6] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[6]));
		if(args[7] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[7]));
		if(args[8] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[8]));
		if(args[9] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[9]));
		if(args[10] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[10]));
		if(args[11] != null) __statement.setTimestamp(count++, generateTimestampFromDate((java.util.Date)args[11]));
		if(args[12] != null) __statement.setInt(count++, GenericBase.__getInt(args[12]));
		if(args[13] != null) __statement.setInt(count++, GenericBase.__getInt(args[13]));
		if(args[14] != null) __statement.setInt(count++, GenericBase.__getInt(args[14]));
		if(args[15] != null) __statement.setInt(count++, GenericBase.__getInt(args[15]));
		if(args[16] != null) __statement.setInt(count++, GenericBase.__getInt(args[16]));
		if(args[17] != null) __statement.setInt(count++, GenericBase.__getInt(args[17]));
		return count;
	}

	@Override
	public String getSQLText() {
		__logger.info(__SQLText);
		return __SQLText;
	}

	@Override
	public String getFieldList(){
		return RESULTSETFIELDLIST;
	}

	private final static String __SQLText = "SELECT AAA.*, ( AAA.first_quarter + AAA.second_quarter + AAA.third_quarter + AAA.fourth_quarter ) AS total_quarter, ( AAA.first_pay_integral + AAA.second_pay_integral + AAA.third_pay_integral + AAA.fourth_pay_integral ) AS total_pay_quarter, ( AAA.first_quarter + AAA.second_quarter + AAA.third_quarter + AAA.fourth_quarter + AAA.first_pay_integral + AAA.second_pay_integral + AAA.third_pay_integral + AAA.fourth_pay_integral ) AS five, ( AAA.one_average + AAA.two_average + AAA.three_average + AAA.four_average ) AS five_average, CASE WHEN ( AAA.one_average + AAA.two_average + AAA.three_average + AAA.four_average ) = 0 THEN 0 ELSE (( AAA.first_quarter + AAA.second_quarter + AAA.third_quarter + AAA.fourth_quarter + AAA.first_pay_integral + AAA.second_pay_integral + AAA.third_pay_integral + AAA.fourth_pay_integral ) / ( AAA.one_average + AAA.two_average + AAA.three_average + AAA.four_average )) END AS five_average_num FROM ( SELECT sal.department_id, sal.YEAR, sal.first_quarter, bonus.first_pay_integral, ( sal.first_quarter + bonus.first_pay_integral ) AS one, CASE WHEN aver.one_average ISNULL or aver.one_average <=0 THEN 0 ELSE aver.one_average END, CASE WHEN aver.one_average ISNULL or aver.one_average <=0 THEN 0 ELSE (( sal.first_quarter + bonus.first_pay_integral ) / aver.one_average ) END AS one_average_num, sal.second_quarter, bonus.second_pay_integral, ( sal.second_quarter + bonus.second_pay_integral ) AS two, CASE WHEN aver.two_average ISNULL or aver.two_average <=0 THEN 0 ELSE aver.two_average END, CASE WHEN aver.two_average ISNULL or aver.two_average <=0 THEN 0 ELSE (( sal.second_quarter + bonus.second_pay_integral ) ) / aver.two_average END AS two_average_num, sal.third_quarter, bonus.third_pay_integral, ( sal.third_quarter + bonus.third_pay_integral ) AS three, CASE WHEN aver.three_average ISNULL or aver.three_average <=0 THEN 0 ELSE aver.three_average END, CASE WHEN aver.three_average ISNULL or aver.three_average <=0 THEN 0 ELSE ( ( sal.third_quarter + bonus.third_pay_integral ) / aver.three_average ) END AS three_average_num, sal.fourth_quarter, bonus.fourth_pay_integral, ( sal.fourth_quarter + bonus.fourth_pay_integral ) AS four, CASE WHEN aver.four_average ISNULL or aver.four_average <=0 THEN 0 ELSE aver.four_average END , CASE WHEN aver.four_average ISNULL or aver.four_average <=0 THEN 0 ELSE (( sal.fourth_quarter + bonus.fourth_pay_integral ) / aver.four_average ) END AS four_average_num FROM ( SELECT aa.department_id, aa.YEAR, ( SUM ( aa.january ) + SUM ( aa.february ) + SUM ( aa.march )) AS first_quarter, ( SUM ( aa.april ) + SUM ( aa.may ) + SUM ( aa.june ) ) AS second_quarter, ( SUM ( aa.july ) + SUM ( aa.august ) + SUM ( aa.september )) AS third_quarter, ( SUM ( aa.october ) + SUM ( aa.november ) + SUM ( aa.december )) AS fourth_quarter FROM ( SELECT A .department_id, YEAR, CASE WHEN MONTH = 1 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS january, CASE WHEN MONTH = 2 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS february, CASE WHEN MONTH = 3 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS march, CASE WHEN MONTH = 4 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS april, CASE WHEN MONTH = 5 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS may, CASE WHEN MONTH = 6 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS june, CASE WHEN MONTH = 7 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS july, CASE WHEN MONTH = 8 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS august, CASE WHEN MONTH = 9 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS september, CASE WHEN MONTH = 10 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS october, CASE WHEN MONTH = 11 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS november, CASE WHEN MONTH = 12 THEN ( SUM ( CAST ( convert_from( decrypt ( CAST ( should_salary AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_no_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( leave_deduct_tax AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_insurance AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC )) + SUM ( CAST ( convert_from( decrypt ( CAST ( unit_total_fund AS bytea ), CAST (( SELECT image_path FROM system_config WHERE system_config_id = 2 ) AS bytea ), 'aes' ), 'SQL_ASCII' ) AS NUMERIC ))) ELSE 0 END AS december FROM salary_totals A LEFT JOIN plate_departments b ON A.department_id = b.department_id WHERE company_id =? AND b.plate_id =? GROUP BY A.department_id, YEAR, MONTH ORDER BY A.department_id, YEAR, MONTH ) AS aa WHERE aa.department_id =? AND aa.YEAR =? GROUP BY aa.department_id, aa.YEAR ) AS sal LEFT JOIN ( SELECT AAA.*, '0' AS YEAR FROM ( SELECT AA.department_id, ds.department_name, SUM ( AA.first_pay_integral ) AS first_pay_integral, SUM ( AA.second_pay_integral ) AS second_pay_integral, SUM ( AA.third_pay_integral ) AS third_pay_integral, SUM ( AA.fourth_pay_integral ) AS fourth_pay_integral, SUM ( AA.first_pay_integral + AA.second_pay_integral + AA.third_pay_integral + AA.fourth_pay_integral ) AS total_pay_integral FROM ( SELECT pd.department_id, CASE WHEN A.pay_integral ISNULL THEN 0 ELSE A.pay_integral END AS first_pay_integral, CASE WHEN B.pay_integral ISNULL THEN 0 ELSE B.pay_integral END AS second_pay_integral, CASE WHEN C.pay_integral ISNULL THEN 0 ELSE C.pay_integral END AS third_pay_integral, CASE WHEN D.pay_integral ISNULL THEN 0 ELSE D.pay_integral END AS fourth_pay_integral FROM plate_departments pd LEFT JOIN ( SELECT bpd.department_id, SUM ( bpd.pay_integral ) AS pay_integral FROM bonus_payment_details bpd WHERE bpd.STATE = 1 AND bpd.pay_date >=? AND bpd.pay_date <=? GROUP BY bpd.department_id ) AS A ON pd.department_id = A.department_id LEFT JOIN ( SELECT bpd.department_id, SUM ( bpd.pay_integral ) AS pay_integral FROM bonus_payment_details bpd WHERE bpd.STATE = 1 AND bpd.pay_date >=? AND bpd.pay_date <=? GROUP BY bpd.department_id ) AS B ON pd.department_id = B.department_id LEFT JOIN ( SELECT bpd.department_id, SUM ( bpd.pay_integral ) AS pay_integral FROM bonus_payment_details bpd WHERE bpd.STATE = 1 AND bpd.pay_date >=? AND bpd.pay_date <=? GROUP BY bpd.department_id ) AS C ON pd.department_id = C.department_id LEFT JOIN ( SELECT bpd.department_id, SUM ( bpd.pay_integral ) AS pay_integral FROM bonus_payment_details bpd WHERE bpd.STATE = 1 AND bpd.pay_date >=? AND bpd.pay_date <=? GROUP BY bpd.department_id ) AS D ON pd.department_id = D.department_id WHERE pd.plate_id =? ) AS AA LEFT JOIN departments ds ON ds.department_id = AA.department_id GROUP BY AA.department_id, ds.department_name ORDER BY AA.department_id ) AS AAA ) AS bonus ON sal.department_id = bonus.department_id LEFT JOIN ( SELECT aa.department_id, aa.YEAR, ( aa.one_befor_num + bb.one_after_num + aa.two_befor_num + bb.two_after_num + aa.three_befor_num + bb.three_after_num ) / 6.0 AS one_average, ( aa.four_befor_num + bb.four_after_num + aa.five_befor_num + bb.five_after_num + aa.six_befor_num + bb.six_after_num ) / 6.0 AS two_average, ( aa.seven_befor_num + bb.seven_after_num + aa.eight_befor_num + bb.eight_after_num + aa.nine_befor_num + bb.nine_after_num ) / 6.0 AS three_average, ( aa.ten_befor_num + bb.ten_after_num + aa.eleven_befor_num + bb.eleven_after_num + aa.twelf_befor_num + bb.twelf_after_num ) / 6.0 AS four_average FROM ( SELECT YEAR , A.department_id, COUNT ( MONTH = 1 OR NULL ) AS one_befor_num, COUNT ( MONTH = 2 OR NULL ) AS two_befor_num, COUNT ( MONTH = 3 OR NULL ) AS three_befor_num, COUNT ( MONTH = 4 OR NULL ) AS four_befor_num, COUNT ( MONTH = 5 OR NULL ) AS five_befor_num, COUNT ( MONTH = 6 OR NULL ) AS six_befor_num, COUNT ( MONTH = 7 OR NULL ) AS seven_befor_num, COUNT ( MONTH = 8 OR NULL ) AS eight_befor_num, COUNT ( MONTH = 9 OR NULL ) AS nine_befor_num, COUNT ( MONTH = 10 OR NULL ) AS ten_befor_num, COUNT ( MONTH = 11 OR NULL ) AS eleven_befor_num, COUNT ( MONTH = 12 OR NULL ) AS twelf_befor_num FROM employee_day_plate_records A LEFT JOIN employees e ON A.employee_id = e.employee_id LEFT JOIN plate_departments pd ON pd.department_id = A.department_id WHERE YEAR =? AND pd.plate_id >= 0 AND pd.plate_id =? AND EXTRACT ( DAY FROM record_date ) = 1 AND A.onboard_status IN ( 1, 2 ) AND A.record_date >= CASE WHEN e.onboard_date IS NULL THEN A.record_date ELSE e.onboard_date END GROUP BY YEAR, A.department_id ) AS aa FULL JOIN ( SELECT YEAR , A.department_id, COUNT ( MONTH = 1 OR NULL ) AS one_after_num, COUNT ( MONTH = 2 OR NULL ) AS two_after_num, COUNT ( MONTH = 3 OR NULL ) AS three_after_num, COUNT ( MONTH = 4 OR NULL ) AS four_after_num, COUNT ( MONTH = 5 OR NULL ) AS five_after_num, COUNT ( MONTH = 6 OR NULL ) AS six_after_num, COUNT ( MONTH = 7 OR NULL ) AS seven_after_num, COUNT ( MONTH = 8 OR NULL ) AS eight_after_num, COUNT ( MONTH = 9 OR NULL ) AS nine_after_num, COUNT ( MONTH = 10 OR NULL ) AS ten_after_num, COUNT ( MONTH = 11 OR NULL ) AS eleven_after_num, COUNT ( MONTH = 12 OR NULL ) AS twelf_after_num FROM employee_day_plate_records A LEFT JOIN employees e ON A.employee_id = e.employee_id LEFT JOIN plate_departments pd ON pd.department_id = A.department_id WHERE YEAR =? AND pd.plate_id >= 0 AND pd.plate_id =? AND record_date = date_trunc( 'day', date_trunc( 'month', record_date + INTERVAL '1 month' ) + INTERVAL '-1 day' ) AND A.onboard_status IN ( 1, 2 ) AND A.record_date <= ( CASE WHEN e.resignation_date IS NULL THEN now() ELSE e.resignation_date END ) GROUP BY YEAR, A.department_id ) AS bb ON aa.YEAR = bb.YEAR AND aa.department_id = bb.department_id WHERE aa.department_id =? ORDER BY aa.YEAR, aa.department_id ) AS aver ON aver.department_id = sal.department_id ) AS AAA" ;
	private final static String RESULTSETFIELDLIST = "department_id,year,first_quarter,first_pay_integral,one,one_average,one_average_num,second_quarter,second_pay_integral,two,two_average,two_average_num,third_quarter,third_pay_integral,three,three_average,three_average_num,fourth_quarter,fourth_pay_integral,four,four_average,four_average_num,total_quarter,total_pay_quarter,five,five_average,five_average_num";
	private final static String[] fieldNames = { "company_id", "plate_id", "department_id", "YEAR", "first_start", "first_end", "second_start", "second_end", "third_start", "third_end", "fourth_start", "fourth_end", "plate_id", "YEAR", "plate_id", "YEAR", "plate_id", "department_id"};
}
